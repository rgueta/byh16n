{"version":3,"sources":["../src/index.js"],"names":["PORT","config","app","port","httpServer","io","Server","cors","origin","methods","listen","process","env","sockets","on","socket","room","console","log","join","name","now","Date","JSON","stringify","toLocaleString","username","emit","user","event","message","msg","text","createdAt","err","require","modelAlerts"],"mappings":";;AACA;;AACA;;AACA;;AAMA;;AAwBA;;AAuDE;;;;AAxFF;AAMA;AACA,MAAMA,IAAI,GAAGC,gBAAOC,GAAP,CAAWC,IAAxB;AA4BA,MAAMC,UAAU,GAAG,wBAAaF,YAAb,CAAnB;AAGA,MAAMG,EAAE,GAAG,IAAIC,cAAJ,CAAWF,UAAX,EAAuB;AAC9BG,EAAAA,IAAI,EAAC;AACDC,IAAAA,MAAM,EAAE,GADP;AAEDC,IAAAA,OAAO,EAAC,CAAC,KAAD,EAAO,MAAP;AAFP,GADyB,CAKhC;;AALgC,CAAvB,CAAX;AAQAL,UAAU,CAACM,MAAX,CAAkBC,OAAO,CAACC,GAAR,CAAYZ,IAAZ,IAAoBA,IAAtC,E,CACA;AAIA;;AAEAK,EAAE,CAACQ,OAAH,CAAWC,EAAX,CAAc,YAAd,EAA6BC,MAAD,IAAY;AAEpC;AACA;AAGAA,EAAAA,MAAM,CAACD,EAAP,CAAU,QAAV,EAAoBE,IAAD,IAAU;AAC3BC,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCF,IAArC;AACAD,IAAAA,MAAM,CAACI,IAAP,CAAYH,IAAZ;AACD,GAHD;AAKAD,EAAAA,MAAM,CAACD,EAAP,CAAU,UAAV,EAAuBM,IAAD,IAAU;AAC9B,QAAIC,GAAG,GAAG,IAAIC,IAAJ,EAAV;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAA2BK,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAA3B,GAAoD,OAAMC,GAAG,CAACI,cAAJ,EAAqB,EAA3F;AAEAV,IAAAA,MAAM,CAACW,QAAP,GAAkBN,IAAlB;AACAf,IAAAA,EAAE,CAACsB,IAAH,CAAQ,eAAR,EAAyB;AAACC,MAAAA,IAAI,EAAER,IAAP;AAAaS,MAAAA,KAAK,EAAE;AAApB,KAAzB;AACD,GAND;AAQAd,EAAAA,MAAM,CAACD,EAAP,CAAU,cAAV,EAA2BgB,OAAD,IAAa;AACrCzB,IAAAA,EAAE,CAACsB,IAAH,CAAQ,SAAR,EAAmB;AAACI,MAAAA,GAAG,EAAED,OAAO,CAACE,IAAd;AAAoBJ,MAAAA,IAAI,EAAEb,MAAM,CAACW,QAAjC;AAA2CO,MAAAA,SAAS,EAAE,IAAIX,IAAJ;AAAtD,KAAnB;AACD,GAFD;AAIAP,EAAAA,MAAM,CAACD,EAAP,CAAU,eAAV,EAA4BoB,GAAD,IAAS;AAClCjB,IAAAA,OAAO,CAACC,GAAR,CAAa,wBAAuBgB,GAAG,CAACJ,OAAQ,EAAhD;AACD,GAFD;AAIAf,EAAAA,MAAM,CAACD,EAAP,CAAU,YAAV,EAAwB,YAAU;AAChCT,IAAAA,EAAE,CAACsB,IAAH,CAAQ,eAAR,EAAyB;AAACC,MAAAA,IAAI,EAAEb,MAAM,CAACW,QAAd;AAAwBG,MAAAA,KAAK,EAAE;AAA/B,KAAzB;AACD,GAFD,EA3BoC,CA+BpC;AACA;AACD,CAjCH;;AAqCAM,OAAO,CAAC,iBAAD,CAAP,CAA2BjC,YAA3B,EAA+BkC,eAA/B,EAA2C/B,EAA3C,E,CAEA;;;AAEAY,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqClB,IAArC","sourcesContent":["//--- this file is just to run the app\r\nimport config from \"./config\";\r\nimport app from './app';\r\nimport fs from 'fs';\r\n\r\n\r\n// index setup\r\nconst PORT = config.app.port;\r\n\r\nimport { Server } from \"socket.io\";\r\n\r\n//#region ---- https --------------------------------------\r\n// import { createServer } from \"https\";\r\n\r\n// const httpsServer = createServer({\r\n//   key : fs.readFileSync('key.pem'),\r\n//   cert : fs.readFileSync('cert.pem')\r\n// },app);\r\n\r\n\r\n// const io = new Server(httpsServer, {\r\n//     cors:{\r\n//         origin: '*',\r\n//         methods:['GET','POST']\r\n//     }\r\n//   // ...\r\n// });\r\n\r\n// httpsServer.listen(PORT);\r\n//#endregion ------- hhtps  ------\r\n\r\n\r\n// #region   -------- http  -----------------------------\r\nimport { createServer } from \"http\";\r\n\r\nconst httpServer = createServer(app);\r\n\r\n\r\nconst io = new Server(httpServer, {\r\n    cors:{\r\n        origin: '*',\r\n        methods:['GET','POST']\r\n    }\r\n  // ...\r\n});\r\n\r\nhttpServer.listen(process.env.PORT || PORT);\r\n// #endregion ------ http  ---------\r\n\r\n\r\n\r\n//#region ----- sockets -------------------------------------------------------\r\n\r\nio.sockets.on('connection', (socket) => {\r\n\r\n    //sample to emit with rooms\r\n    // io.sockets.in(room).emit('event', data);\r\n\r\n\r\n    socket.on('create',(room) => {\r\n      console.log('user joined to room: ', room);\r\n      socket.join(room);\r\n    });\r\n     \r\n    socket.on('set-name', (name) => {\r\n      let now = new Date();\r\n      console.log('socket set-name user: ' + JSON.stringify(name) +  ` at ${now.toLocaleString()}`);\r\n\r\n      socket.username = name;\r\n      io.emit('users-changed', {user: name, event: 'joined'});    \r\n    });\r\n    \r\n    socket.on('send-message', (message) => {\r\n      io.emit('message', {msg: message.text, user: socket.username, createdAt: new Date()});    \r\n    });\r\n\r\n    socket.on(\"connect_error\", (err) => {\r\n      console.log(`connect_error due to ${err.message}`);\r\n    });\r\n\r\n    socket.on('disconnect', function(){\r\n      io.emit('users-changed', {user: socket.username, event: 'left'});   \r\n    });\r\n\r\n    // console.log('a user connected, socket -> ' +socket.id + ' - ' + socket.handshake.headers['user-agent']);\r\n    // console.log(socket.handshake.headers['user-agent']);\r\n  });\r\n\r\n  import modelAlerts from './models/alerts';\r\n\r\nrequire('./routes/routes')(app,modelAlerts,io);\r\n\r\n// #endregion  --------------------------------------------------------------\r\n\r\nconsole.log('server listen on port', PORT)\r\n\r\n"],"file":"index.js"}