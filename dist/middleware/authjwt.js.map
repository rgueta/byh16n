{"version":3,"sources":["../../src/middleware/authjwt.js"],"names":["verifyToken","req","res","next","console","log","headers","token","header","replace","status","json","message","decoded","jwt","verify","config","auth","SECRET","JSON","stringify","user","Users","findById","params","userId","pwd","e","isAdmin","roles","Roles","find","_id","$in","i","length","name","isNeighbor","founduser","found_roles"],"mappings":"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","sourcesContent":["import jwt from \"jsonwebtoken\";\r\nimport config from '../config';\r\nimport Users from '../models/Users';\r\nimport Roles from \"../models/Roles\";\r\n\r\n// export const verifyToken = async (req,res, next) =>{\r\n//     try{\r\n//         const token = req.headers[\"x-access-token\"];\r\n//         console.log(token);\r\n\r\n//         if(!token) return res.status(403).json({message:'Not token provided'})\r\n//         const decoded = await jwt.verify(token,config.auth.SECRET,(err,decoded) => {\r\n//             if(err){\r\n//                 console.log(err);\r\n//                 return res.status(401).json({message:'jwt verify',\r\n//         'error': err.message});\r\n           \r\n//             }else{\r\n//                 console.log('decoded: ' + decoded);\r\n//             }\r\n//         });\r\n//         next();\r\n//         req.userId = decoded.id;\r\n        \r\n//         const user = await Users.findById(req.userId,{pwd:0});\r\n//         if(!user) return res.status(404).json({message:\"no user found\"});\r\n//         console.log(decoded);\r\n//         next();\r\n\r\n//     }catch(e){\r\n//         return res.status(401).json({message:'Unauthorized',\r\n//         'error': e.message})\r\n//     }\r\n    \r\n// };\r\n\r\n// --- Original code  ---\r\n\r\n\r\nexport const verifyToken = async (req,res, next) =>{\r\n    console.log('verifyToken req.headers --> ', req.headers);\r\n    try{\r\n        let token = req.header('Authorization');\r\n        token = token.replace('Bearer ','');\r\n        console.log('verifyToken header[Authorization] --> ', token);\r\n\r\n        if(!token) return res.status(403).json({message:'Not token provided'})\r\n        const decoded = jwt.verify(token,config.auth.SECRET);\r\n        console.log('decoded: ' + JSON.stringify(decoded))\r\n        // req.paramss.userId = decoded.id;\r\n        \r\n        const user = await Users.findById(req.params.userId,{pwd:0});\r\n        if(!user) return res.status(404).json({message:\"no user found\"});\r\n        console.log(decoded);\r\n        next();\r\n        return;\r\n\r\n    }catch(e){\r\n        console.log('verifyToken Error --> ', e.message)\r\n        return res.status(401).json(e)\r\n\r\n        // return res.status(401).json({message:'Unauthorized',\r\n        // 'error': e.message})\r\n    }\r\n    \r\n};\r\n\r\nexport const isAdmin = async(req, res, next) => {\r\n    console.log('isAdmin params --> ', req.params)\r\n    const user = await Users.findById(req.params.userId);\r\n    const roles = await Roles.find({_id:{$in: user.roles}});\r\n    console.log(roles);\r\n    for(let i=0; i < roles.length; i++ ){\r\n        if(roles[i].name === 'admin'){\r\n            next();\r\n            return;\r\n        }\r\n        \r\n    }\r\n\r\n    return res.status(403).json({message:\"Require admin role\"});\r\n}\r\n\r\nexport const isNeighbor = async(req, res, next) => {\r\n    console.log('isNeighbor req.params', req.params);\r\n    const founduser = await Users.findById(req.params.userId);\r\n\r\n    if(!founduser) return res.status(401).json({'error':'isNeighbor user not found'})\r\n    const found_roles = await Roles.find({_id:{$in: founduser.roles}});\r\n    if(!found_roles) return res.status(401).json({'error':'roles not found for user'})\r\n    console.log('isNeighbor role found --> ',found_roles);\r\n    for(let i=0; i < found_roles.length; i++ ){\r\n        if(found_roles[i].name === 'neighbor'){\r\n            next();\r\n            return;\r\n        }\r\n    }\r\n\r\n    return res.status(403).json({message:\"Require neighbor role\"});\r\n    \r\n}"],"file":"authjwt.js"}