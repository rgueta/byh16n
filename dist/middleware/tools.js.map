{"version":3,"sources":["../../src/middleware/tools.js"],"names":["algorithm","key","crypto","randomBytes","iv","encrypt","text","cipher","createCipheriv","Buffer","from","encrypted","update","concat","final","toString","encryptedData","decrypt","encryptedText","decipher","createDecipheriv","decrypted"],"mappings":";;;;;;;AAAA;;;;AAEA,MAAMA,SAAS,GAAG,aAAlB;;AACA,MAAMC,GAAG,GAAGC,gBAAOC,WAAP,CAAmB,EAAnB,CAAZ;;AACA,MAAMC,EAAE,GAAGF,gBAAOC,WAAP,CAAmB,EAAnB,CAAX,C,CAEA;;;AACO,MAAME,OAAO,GAAG,MAAOC,IAAP,IAAgB;AACnC,MAAIC,MAAM,GAAGL,gBAAOM,cAAP,CAAsB,aAAtB,EAAqCC,MAAM,CAACC,IAAP,CAAYT,GAAZ,CAArC,EAAuDG,EAAvD,CAAb;;AACA,MAAIO,SAAS,GAAGJ,MAAM,CAACK,MAAP,CAAcN,IAAd,CAAhB;AACAK,EAAAA,SAAS,GAAGF,MAAM,CAACI,MAAP,CAAc,CAACF,SAAD,EAAYJ,MAAM,CAACO,KAAP,EAAZ,CAAd,CAAZ;AACA,SAAO;AAAEV,IAAAA,EAAE,EAAEA,EAAE,CAACW,QAAH,CAAY,KAAZ,CAAN;AAA0BC,IAAAA,aAAa,EAAEL,SAAS,CAACI,QAAV,CAAmB,KAAnB;AAAzC,GAAP;AACF,CALK,C,CAON;;;;;AACO,MAAME,OAAO,GAAG,MAAOX,IAAP,IAAgB;AACpC,MAAIF,EAAE,GAAGK,MAAM,CAACC,IAAP,CAAYJ,IAAI,CAACF,EAAjB,EAAqB,KAArB,CAAT;AACA,MAAIc,aAAa,GAAGT,MAAM,CAACC,IAAP,CAAYJ,IAAI,CAACU,aAAjB,EAAgC,KAAhC,CAApB;;AACA,MAAIG,QAAQ,GAAGjB,gBAAOkB,gBAAP,CAAwB,aAAxB,EAAuCX,MAAM,CAACC,IAAP,CAAYT,GAAZ,CAAvC,EAAyDG,EAAzD,CAAf;;AACA,MAAIiB,SAAS,GAAGF,QAAQ,CAACP,MAAT,CAAgBM,aAAhB,CAAhB;AACAG,EAAAA,SAAS,GAAGZ,MAAM,CAACI,MAAP,CAAc,CAACQ,SAAD,EAAYF,QAAQ,CAACL,KAAT,EAAZ,CAAd,CAAZ;AACA,SAAOO,SAAS,CAACN,QAAV,EAAP;AACF,CAPM","sourcesContent":["import  crypto  from \"crypto\";\r\n\r\nconst algorithm = 'aes-256-cbc';\r\nconst key = crypto.randomBytes(32);\r\nconst iv = crypto.randomBytes(16);\r\n\r\n//Encrypting text\r\nexport const encrypt = async (text) => {\r\n    let cipher = crypto.createCipheriv('aes-256-cbc', Buffer.from(key), iv);\r\n    let encrypted = cipher.update(text);\r\n    encrypted = Buffer.concat([encrypted, cipher.final()]);\r\n    return { iv: iv.toString('hex'), encryptedData: encrypted.toString('hex') };\r\n }\r\n \r\n // Decrypting text\r\n export const decrypt = async (text) => {\r\n    let iv = Buffer.from(text.iv, 'hex');\r\n    let encryptedText = Buffer.from(text.encryptedData, 'hex');\r\n    let decipher = crypto.createDecipheriv('aes-256-cbc', Buffer.from(key), iv);\r\n    let decrypted = decipher.update(encryptedText);\r\n    decrypted = Buffer.concat([decrypted, decipher.final()]);\r\n    return decrypted.toString();\r\n }"],"file":"tools.js"}