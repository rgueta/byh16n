{"version":3,"sources":["../../src/controllers/twilio.controller.js"],"names":["client","Twilio","config","twilio","SID","AUTH_TOKEN","sendMsgOpen","req","res","messages","create","body","params","msg","messagingServiceSid","to","phone","then","message","console","log","sid","done","err","status","json","JSON","stringify","sendMsgAccess","split","foundUSer","Users","findOne","_id","toLowerCase","userId","findByIdAndUpdate","$set","new","result"],"mappings":"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","sourcesContent":["import { Twilio } from \"twilio\";\r\nimport { NumberInstance } from \"twilio/lib/rest/pricing/v2/number\";\r\nimport config from \"../../src/config\";\r\nimport Users from \"../models/Users\";\r\n\r\nconst client = new Twilio(config.twilio.SID, config.twilio.AUTH_TOKEN);\r\n\r\nexport const sendMsgOpen = async(req, res) => {\r\n    \r\n    try{\r\n        client.messages \r\n      .create({ \r\n         body: req.params.msg,  \r\n         messagingServiceSid: 'MGe8f3e7143c2962fbeac086f010615494',      \r\n         to: req.params.phone \r\n       }) \r\n      .then(message => console.log(message.sid)) \r\n      .done();\r\n    }catch(err){\r\n        res.status(404).json({'msg':'twilio send error' + JSON.stringify(err)})\r\n    }\r\n    res.status(201).json({'msg':'twilio send ok'})\r\n}\r\n\r\nexport const sendMsgAccess = async(req, res) => {\r\n  return\r\n  // console.log('twilio access params --> ', req.params);\r\n  const msg = req.params.msg.split(',');\r\n  // console.log('MEssage --> ', msg);\r\n  const foundUSer = Users.findOne({_id: msg[1]})\r\n  if(foundUSer){\r\n    console.log('Si se encontro usuario')\r\n    if(msg[0].toLowerCase() == 'blocked'){\r\n      console.log('Set Blocked status to ID -->', req.params.userId )\r\n      await Users.findByIdAndUpdate(msg[1], {$set : { status : 4 }},{new : false}, (err , result) => {\r\n        if(err){\r\n          return res.status(200).json({'msg': 'error', 'status' : 'Could not updated status blocked'})\r\n        }\r\n        console.log('return value after updated blocked --> ', result);\r\n      });\r\n    }else if(msg[0].toLowerCase() == 'unblocked'){\r\n      console.log('Si es Unblocked command')\r\n      Users.findByIdAndUpdate(msg[1], {$set : { status : 1 }},{new : false}, (err , result) => {\r\n        if(err){\r\n          return res.status(200).json({'msg': 'error', 'status' : 'Could not updated status blocked'})\r\n        }\r\n        console.log('return value after updated  unblocked --> ', result);\r\n      });\r\n    }\r\n    \r\n  }else{\r\n    \r\n    console.log('No se encontro usuario')\r\n  }\r\n  \r\n  try{\r\n      client.messages \r\n    .create({ \r\n       body: req.params.msg,  \r\n       messagingServiceSid: 'MGe8f3e7143c2962fbeac086f010615494',      \r\n       to: req.params.phone \r\n     }) \r\n    .then(message => console.log(message.sid)) \r\n    .done();\r\n  }catch(err){\r\n      res.status(404).json({'msg':'twilio send error' + JSON.stringify(err)})\r\n  }\r\n  res.status(201).json({'msg':'twilio send ok'})\r\n}"],"file":"twilio.controller.js"}