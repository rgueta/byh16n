{"version":3,"sources":["../../src/controllers/pwdRST.controller.js"],"names":["hash_pwdRST","pwdRST_id","transporter","nodemailer","createTransport","host","port","secure","requireTLS","auth","user","pass","html_call","pwdRSTReq","req","res","console","log","params","foundUser","Users","find","email","length","status","json","newPwdRST","pwdRST","confirmed","reseted","save","err","pwdRST_saved","_id","createHTML","mailOption","from","to","subject","html","sendMail","info","response","e","message","pwdRSTConfirm","foundpwdRST","id","findOne","findByIdAndUpdate","$set","new","resultConfirmed","pwdRSTApply","Encryptedpwd","encryptPassword","pwd","findOneAndUpdate","result","resultReseted","salt","bcrypt","genSalt","hash","config","app","public_host"],"mappings":"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","sourcesContent":["import Users from '../models/Users';\r\nimport config from '../config';\r\nimport pwdRST from \"../models/pwdRST\";\r\nimport nodemailer from \"nodemailer\";\r\nimport bcrypt from 'bcryptjs';\r\n\r\nimport { Tools } from \"../middleware/index\";\r\n\r\nlet hash_pwdRST = '';\r\nlet pwdRST_id = '';\r\n\r\nconst transporter = nodemailer.createTransport({\r\n    host: 'smtp.gmail.com',\r\n        port: 587,\r\n        secure:false,\r\n        requireTLS:true,\r\n        auth: {\r\n          user: 'ricardogueta@gmail.com',\r\n          pass : 'zzdlhhnuerultnnf'\r\n        }\r\n});\r\n\r\n\r\n// #region html layout ---------------------------------------\r\nlet html_call = '';\r\n\r\n// #endregion html layout ---------------------------------------\r\n\r\nexport const pwdRSTReq = async (req,res) => {\r\n    console.log('pwdRSTReq params ---> ', req.params);\r\n\r\n    let foundUser = await Users.find({email : req.params.email});\r\n\r\n    try{\r\n\r\n        console.log('foundUser ---->  ',foundUser);\r\n        \r\n        if(!foundUser.length) return res.status(400).json({'message': 'User not found'});\r\n\r\n        // #region save on DB   ------------------------------\r\n        \r\n        const newPwdRST = new pwdRST({email:req.params.email,confirmed:false,reseted:false});\r\n        newPwdRST.save(async (err, pwdRST_saved) => {\r\n            if(err) return res.status(400).json({'message': 'Error can not saved pwdRST'});\r\n            pwdRST_id = await pwdRST_saved._id;\r\n            console.log('pwdRST_saved id -->', pwdRST_saved._id);\r\n\r\n\r\n         createHTML();\r\n\r\n        const mailOption = await {\r\n            from : 'byh16@gmail.com',\r\n            to : req.params.email,\r\n            subject : 'Pssword reset',\r\n            html : html_call\r\n        }\r\n        \r\n        await transporter.sendMail(mailOption, (err, info) =>{\r\n            if(err){\r\n                console.log(err)\r\n                res.status('201').json({'pwd rst error': err})\r\n            }else{\r\n                console.log('Email sent: ', info.response);\r\n                res.status('201').json({'email sent': info.response})\r\n            }\r\n        });\r\n\r\n        });\r\n\r\n\r\n        // hash_pwdRST = await Tools.encrypt(req.params.email);\r\n        // const hash_pwdRST_decrypted = await Tools.decrypt(hash_pwdRST);\r\n        // console.log('hash pwdRST --> ' + JSON.stringify(hash_pwdRST) + '\\n decode --> ' + hash_pwdRST_decrypted);\r\n\r\n        // #endregion  -----------------------------------------\r\n\r\n        \r\n        // console.log('pwd RST Req ..... --> ', req.params);\r\n\r\n\r\n        \r\n\r\n        res.status('201').json({'message': 'email sent , hash --> ' + hash_pwdRST})\r\n\r\n    }catch(e){\r\n        console.log('error pwdRSTReq -----> ' , e);\r\n        res.status('401').json({'pwdRSTReq error' : e.message})\r\n    }\r\n    \r\n}\r\n\r\n\r\nexport const pwdRSTConfirm = async (req, res) => {\r\n\r\n    const foundpwdRST  = await pwdRST.find({_id : req.params.id});\r\n    if(!foundpwdRST.length) return res.status(400).json({'error' : 'No hay solicitud para este usuario'});\r\n\r\n    const foundUser = await Users.findOne({email : foundpwdRST[0].email});\r\n    if(!foundUser) return res.status(400).json({'error' : 'User not found'});\r\n\r\n    pwdRST.findByIdAndUpdate(req.params.id,{$set : {confirmed : true}},{new:false}, (err, resultConfirmed) => {\r\n        if(err){\r\n            return res.status(400).json({'error' : 'Could not update reseted.'});\r\n        }\r\n    });\r\n\r\n    res.status(201).json({'msg':'Password reset confirmation for [ ' + foundUser.email + ' ]' });\r\n\r\n}\r\n\r\n\r\nexport const pwdRSTApply = async (req, res) => {\r\n    console.log('Password RST confirmed..! ', req.params);\r\n\r\n   const foundpwdRST  = await pwdRST.find({_id : req.params.id});\r\n   if(!foundpwdRST.length) return res.status(400).json({'error' : 'No hay solicitud para este usuario'});\r\n\r\n   try{\r\n        const foundUser = await Users.findOne({email : foundpwdRST[0].email});\r\n        if(!foundUser) return res.status(400).json({'error' : 'User not found'});\r\n\r\n        const Encryptedpwd = await encryptPassword(req.params.pwd);\r\n        if(!Encryptedpwd) return res.status(400).json({'error' : 'No password encrypted.'});\r\n\r\n        Users.findOneAndUpdate({email:foundpwdRST[0].email}, {$set : {pwd:Encryptedpwd}},{new:false},(err, result) =>{\r\n            if(err){\r\n                return res.status(400).json({'error' : 'Could not update password.'});\r\n            }\r\n            \r\n            console.log('userPwdChanged -- > ',result);\r\n\r\n            pwdRST.findByIdAndUpdate(req.params.id,{$set : {reseted : true}},{new:false}, (err, resultReseted) => {\r\n                if(err){\r\n                    return res.status(400).json({'error' : 'Could not update reseted.'});\r\n                }\r\n            });\r\n    \r\n            res.status(201).json({'msg':'Password changed for [' + foundUser.email + '], encrypted pwd --> ' + Encryptedpwd });\r\n\r\n\r\n        })\r\n\r\n       \r\n        // const updPwdRST = pwdRST.updateOne()\r\n   }catch(e){\r\n    res.status(401).json({'Error': e});\r\n    }\r\n}\r\n// #region create HTML layout   -------------------------------------------------------\r\n\r\nasync function encryptPassword(pwd){\r\n    const salt = await bcrypt.genSalt(10);\r\n    return await bcrypt.hash(pwd,salt);\r\n}\r\n\r\nasync function createHTML(){\r\n   html_call =\r\n    `\r\n    <!DOCTYPE html>\r\n    <html>\r\n        <head>\r\n            <meta charset='utf-8'>\r\n            <meta http-equiv='X-UA-Compatible' content='IE=edge'>\r\n            <title>Recupera contraseña</title>\r\n            <meta name='viewport' content='width=device-width, initial-scale=1'>\r\n            <style>\r\n                body {margin:15vh 20vw}\r\n                a {display:flex; justify-content: center; align-items: center; margin-left: auto; margin-right: auto; height: 30px;\r\n                    width: 200px;text-decoration: none;}\r\n                a input {cursor: pointer; display:inline;background-color:#6599CE;border:0;color:white; margin-left: auto;\r\n                    margin-right: auto;height: 30px; width: 200px; border-radius: 10px}\r\n                .logo img {height: 90px; width: 100px; border-radius: 50%;}\r\n            </style>\r\n        </head>\r\n        <body>\r\n            <div class=\"head\">\r\n                <div class=\"logo\">\r\n                    <img src=\"${config.app.public_host}/img/logo_v2.png\">\r\n                </div>\r\n            </div>\r\n            <h3>Reinicio de contraseña</h3>\r\n            <p>Hola !</p>\r\n            <p>Hemos recibido una solicitud de reinicio de contraseña para tu cuenta, \r\n                con gusto te ayudaremos con tu solicitud, para continuar con este proceso haz click \r\n                en el siguiiente boton\r\n            </p>\r\n            <a href='${config.app.public_host}/pwdResetReq?req=${pwdRST_id}' target='#'>\r\n                <input type=\"button\" value=\"RESET PASSWORD\">\r\n            </a>\r\n            <p>\r\n                Si no quieres reiniciar tu contraseña, tan solo ignora este correo y accesa a nuestros aervicios \r\n                como usualmente lo haces.\r\n            </p>\r\n        </body>\r\n       \r\n    </html>\r\n    `\r\n}\r\n\r\n// #endregion create HTML layout   -------------------------------------------------------\r\n"],"file":"pwdRST.controller.js"}