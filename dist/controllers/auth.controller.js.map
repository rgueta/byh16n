{"version":3,"sources":["../../src/controllers/auth.controller.js"],"names":["signUp","req","res","name","email","username","pwd","privada","house","sim","gender","avatar","roles","body","newUser","Users","encryptPassword","foundRoles","Roles","find","$in","map","role","_id","findOne","savedUser","save","token","jwt","sign","id","config","auth","SECRET","expiresIn","token_time","console","log","status","json","signIn","aggregate","$lookup","$unwind","$match","String","$project","coreName","coreSim","err","foundUser","matchPwd","comparePassword","ErrMsg","accessToken","refreshToken","message","SECRET_REFRESH","refresh","headers","header","replace","verifyResult","verify","ignoreExpiration","e"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEO,MAAMA,MAAM,GAAG,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACtC,QAAM;AAAEC,IAAAA,IAAF;AAAOC,IAAAA,KAAP;AAAaC,IAAAA,QAAb;AAAsBC,IAAAA,GAAtB;AAA0BC,IAAAA,OAA1B;AAAkCC,IAAAA,KAAlC;AAAwCC,IAAAA,GAAxC;AAA4CC,IAAAA,MAA5C;AAAmDC,IAAAA,MAAnD;AAA0DC,IAAAA;AAA1D,MAAmEX,GAAG,CAACY,IAA7E;AAEA,QAAMC,OAAO,GAAG,IAAIC,cAAJ,CAAU;AACtBZ,IAAAA,IADsB;AAEtBC,IAAAA,KAFsB;AAGtBC,IAAAA,QAHsB;AAItBE,IAAAA,OAJsB;AAKtBC,IAAAA,KALsB;AAMtBC,IAAAA,GANsB;AAOtBC,IAAAA,MAPsB;AAQtBC,IAAAA,MARsB;AAStBC,IAAAA,KATsB;AAUtBN,IAAAA,GAAG,EAAG,MAAMS,eAAMC,eAAN,CAAsBV,GAAtB;AAVU,GAAV,CAAhB;;AAaA,MAAGM,KAAH,EAAS;AACL,UAAMK,UAAU,GAAG,MAAMC,eAAMC,IAAN,CAAW;AAAChB,MAAAA,IAAI,EAAG;AAACiB,QAAAA,GAAG,EAAGR;AAAP;AAAR,KAAX,CAAzB;AACAE,IAAAA,OAAO,CAACF,KAAR,GAAgBK,UAAU,CAACI,GAAX,CAAeC,IAAI,IAAIA,IAAI,CAACC,GAA5B,CAAhB;AACH,GAHD,MAGK;AACD,UAAMD,IAAI,GAAG,MAAMJ,eAAMM,OAAN,CAAc;AAACrB,MAAAA,IAAI,EAAC;AAAN,KAAd,CAAnB;AACAW,IAAAA,OAAO,CAACF,KAAR,GAAgB,CAACU,IAAI,CAACC,GAAN,CAAhB;AACH;;AAGD,QAAME,SAAS,GAAG,MAAMX,OAAO,CAACY,IAAR,EAAxB;;AACA,QAAMC,KAAK,GAAGC,sBAAIC,IAAJ,CAAS;AAACC,IAAAA,EAAE,EAAGL,SAAS,CAACF;AAAhB,GAAT,EAA8BQ,gBAAOC,IAAP,CAAYC,MAA1C,EAAiD;AAC3DC,IAAAA,SAAS,EAACH,gBAAOC,IAAP,CAAYG;AADqC,GAAjD,CAAd;;AAKAC,EAAAA,OAAO,CAACC,GAAR,CAAYZ,SAAZ;AACAvB,EAAAA,GAAG,CAACoC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAC,aAAQZ;AAAT,GAArB;AACH,CAjCM;;;;AAmCA,MAAMa,MAAM,GAAG,OAAOvC,GAAP,EAAYC,GAAZ,KAAoB;AAEtCkC,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAiBpC,GAAG,CAACY,IAAJ,CAAST,KAA1B,GAAkC,UAAlC,GAA+CH,GAAG,CAACY,IAAJ,CAASP,GAApE,EAFsC,CAGtC;;AAEA,QAAMS,eAAM0B,SAAN,CAAgB,CAClB;AACIC,IAAAA,OAAO,EAAG;AACF,cAAS,OADP;AAEF,oBAAe,KAFb;AAGF,sBAAiB,sBAHf;AAIF,YAAO;AAJL;AADd,GADkB,EASlB;AAACC,IAAAA,OAAO,EAAG;AAAX,GATkB,EAUlB;AACID,IAAAA,OAAO,EAAG;AACF,cAAS,OADP;AAEF,oBAAe,OAFb;AAGF,sBAAiB,KAHf;AAIF,YAAO;AAJL;AADd,GAVkB,EAkBlB;AACA;AACIE,IAAAA,MAAM,EAAG;AACLxC,MAAAA,KAAK,EAAGyC,MAAM,CAAC5C,GAAG,CAACY,IAAJ,CAAST,KAAV;AADT;AADb,GAnBkB,EAyBlB;AACI0C,IAAAA,QAAQ,EAAG;AACPvB,MAAAA,GAAG,EAAG,CADC;AAEPpB,MAAAA,IAAI,EAAG,CAFA;AAGPM,MAAAA,GAAG,EAAG,CAHC;AAIPsC,MAAAA,QAAQ,EAAG,iBAJJ;AAKPC,MAAAA,OAAO,EAAG,gBALH;AAMP5C,MAAAA,KAAK,EAAE,CANA;AAOPE,MAAAA,GAAG,EAAC,CAPG;AAQPM,MAAAA,KAAK,EAAE;AARA;AADf,GAzBkB,CAAhB,EAsCJ,gBAAeqC,GAAf,EAAoBC,SAApB,EAA+B;AAC7B,QAAGD,GAAG,IAAIC,SAAS,IAAI,EAAvB,EAA2B,OAAOhD,GAAG,CAACoC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAC,eAAQ,CAAT;AAAW,gBAAS;AAApB,KAArB,CAAP;AAE3BH,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCa,SAAtC;AACA,UAAMC,QAAQ,GAAI,MAAMpC,eAAMqC,eAAN,CAAsBnD,GAAG,CAACY,IAAJ,CAASP,GAA/B,EAAmC4C,SAAS,CAAC,CAAD,CAAT,CAAa5C,GAAhD,CAAxB;AAEA,QAAG,CAAC6C,QAAJ,EAAc,OAAOjD,GAAG,CAACoC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACZ,MAAAA,KAAK,EAAC,EAAP;AAAW0B,MAAAA,MAAM,EAAC;AAAlB,KAArB,CAAP;;AACd,UAAMC,WAAW,GAAG1B,sBAAIC,IAAJ,CAAS;AAACC,MAAAA,EAAE,EAACoB,SAAS,CAAC,CAAD,CAAT,CAAa3B;AAAjB,KAAT,EAAgCQ,gBAAOC,IAAP,CAAYC,MAA5C,EAAmD;AACnEC,MAAAA,SAAS,EAAE;AADwD,KAAnD,CAApB;;AAIA,QAAG,CAACoB,WAAJ,EAAiB,OAAOpD,GAAG,CAACoC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACgB,MAAAA,YAAY,EAAG,EAAhB;AAAoBC,MAAAA,OAAO,EAAG;AAA9B,KAArB,CAAP;;AACjB,UAAMD,YAAY,GAAG3B,sBAAIC,IAAJ,CAAS;AAACC,MAAAA,EAAE,EAACoB,SAAS,CAAC,CAAD,CAAT,CAAa3B;AAAjB,KAAT,EAAgCQ,gBAAOC,IAAP,CAAYyB,cAA5C,EAA2D;AAC5EvB,MAAAA,SAAS,EAAE;AADiE,KAA3D,CAArB;;AAIAhC,IAAAA,GAAG,CAACoC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAC,qBAAgBe,WAAjB;AAA6B,sBAAgBC,YAA7C;AAA0D,gBAAWL,SAAS,CAAC,CAAD,CAAT,CAAa3B,GAAlF;AACjB,eAAS2B,SAAS,CAAC,CAAD,CAAT,CAAatC,KADL;AACW,aAAMsC,SAAS,CAAC,CAAD,CAAT,CAAazC,GAD9B;AACoC,kBAAWyC,SAAS,CAAC,CAAD,CAAT,CAAaF,OAD5D;AACqE,kBAAaE,SAAS,CAAC,CAAD,CAAT,CAAaH;AAD/F,KAArB;AAEH,GAxDK,CAAN;AA6DH,CAlEM;;;;AAoEA,MAAMW,OAAO,GAAG,OAAOzD,GAAP,EAAYC,GAAZ,KAAmB;AACtCkC,EAAAA,OAAO,CAACC,GAAR,CAAY,4DAAZ,EAA0EpC,GAAG,CAAC0D,OAA9E,EADsC,CAEtC;AACA;;AACA,MAAIhC,KAAK,GAAG,MAAM1B,GAAG,CAAC2D,MAAJ,CAAW,eAAX,CAAlB;AACAjC,EAAAA,KAAK,GAAGA,KAAK,CAACkC,OAAN,CAAc,SAAd,EAAwB,EAAxB,CAAR;AACAzB,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCV,KAAlC;;AAEA,MAAG,CAACA,KAAJ,EAAU;AACNzB,IAAAA,GAAG,CAACoC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACiB,MAAAA,OAAO,EAAG;AAAX,KAArB;AACH;;AAED,MAAG;AACCpB,IAAAA,OAAO,CAACC,GAAR,CAAY,4DAAZ;;AACA,UAAMyB,YAAY,GAAGlC,sBAAImC,MAAJ,CAAWpC,KAAX,EAAkBI,gBAAOC,IAAP,CAAYyB,cAA9B,EAA6C;AAC9DO,MAAAA,gBAAgB,EAAE;AAD4C,KAA7C,CAArB;;AAGA5B,IAAAA,OAAO,CAACC,GAAR,CAAY,4DAAZ,EAA0EyB,YAA1E;;AAEA,UAAMZ,SAAS,GAAGnC,eAAMI,IAAN,CAAW;AAACI,MAAAA,GAAG,EAACuC,YAAY,CAAChC;AAAlB,KAAX,CAAlB;;AACA,QAAGoB,SAAH,EAAa;AACTd,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;;AACA,YAAMiB,WAAW,GAAG1B,sBAAIC,IAAJ,CAAS;AAACC,QAAAA,EAAE,EAACgC,YAAY,CAAChC;AAAjB,OAAT,EAA+BC,gBAAOC,IAAP,CAAYC,MAA3C,EAAkD;AAClEC,QAAAA,SAAS,EAAE;AADuD,OAAlD,CAApB;;AAIA,YAAMqB,YAAY,GAAG3B,sBAAIC,IAAJ,CAAS;AAACC,QAAAA,EAAE,EAACgC,YAAY,CAAChC;AAAjB,OAAT,EAA+BC,gBAAOC,IAAP,CAAYyB,cAA3C,EAA0D;AAC3EvB,QAAAA,SAAS,EAAE;AADgE,OAA1D,CAArB;;AAIAhC,MAAAA,GAAG,CAACoC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAC,kBAAUuB,YAAY,CAAChC,EAAxB;AAA2B,uBAAewB,WAA1C;AACjB,wBAAiBC;AADA,OAArB;AAEH,KAZD,MAYK;AACDnB,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACAnC,MAAAA,GAAG,CAACoC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACiB,QAAAA,OAAO,EAAG;AAAX,OAArB;AACH;AACJ,GAxBD,CAwBC,OAAMS,CAAN,EAAQ;AACL7B,IAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ,EAA+C4B,CAA/C;AACA/D,IAAAA,GAAG,CAACoC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACiB,MAAAA,OAAO,EAAG;AAAX,KAArB;AACH;AACJ,CAxCM","sourcesContent":["import Users from '../models/Users';\r\nimport jwt from 'jsonwebtoken';\r\nimport config from '../config';\r\nimport Roles from '../models/Roles';\r\n\r\nexport const signUp = async (req, res) => {\r\n    const { name,email,username,pwd,privada,house,sim,gender,avatar,roles} = req.body;\r\n\r\n    const newUser = new Users({\r\n        name,\r\n        email,\r\n        username,\r\n        privada,\r\n        house,\r\n        sim,\r\n        gender,\r\n        avatar,\r\n        roles,\r\n        pwd : await Users.encryptPassword(pwd)\r\n    });\r\n\r\n    if(roles){\r\n        const foundRoles = await Roles.find({name : {$in : roles}});\r\n        newUser.roles = foundRoles.map(role => role._id);\r\n    }else{\r\n        const role = await Roles.findOne({name:'visitor'});\r\n        newUser.roles = [role._id];\r\n    }\r\n    \r\n\r\n    const savedUser = await newUser.save();\r\n    const token = jwt.sign({id : savedUser._id},config.auth.SECRET,{\r\n        expiresIn:config.auth.token_time\r\n    });\r\n\r\n\r\n    console.log(savedUser);\r\n    res.status(200).json({'token':token});\r\n}\r\n\r\nexport const signIn = async (req, res) => {\r\n\r\n    console.log('email:  --> ' + req.body.email + ', pwd : ' + req.body.pwd);\r\n    // const foundUser = await Users.findOne({email: req.body.email}).populate(\"roles\");\r\n\r\n    await Users.aggregate([\r\n        {\r\n            $lookup : {\r\n                    'from' : 'cores',\r\n                    'localField' : '_id',\r\n                    'foreignField' : 'Houses.detail.userId',\r\n                    'as' : 'user_core'\r\n                }\r\n        },\r\n        {$unwind : '$user_core'},\r\n        {\r\n            $lookup : {\r\n                    'from' : 'roles',\r\n                    'localField' : 'roles',\r\n                    'foreignField' : '_id',\r\n                    'as' : 'user_roles'\r\n                } \r\n         },\r\n        //  {$unwind : '$user_roles'},\r\n        {\r\n            $match : {\r\n                email : String(req.body.email)\r\n            }\r\n        }\r\n        ,\r\n        {\r\n            $project : {\r\n                _id : 1,\r\n                name : 1,\r\n                sim : 1,\r\n                coreName : '$user_core.Name',\r\n                coreSim : '$user_core.Sim',\r\n                email: 1,\r\n                pwd:1,\r\n                roles: '$user_roles'\r\n            }\r\n        }\r\n        \r\n    ],async function(err, foundUser) {\r\n        if(err || foundUser == '') return res.status(401).json({'errId':1,'ErrMsg':\"Usuario no encontrado\"});\r\n\r\n        console.log('Signin foundUser -- > ', foundUser)\r\n        const matchPwd =  await Users.comparePassword(req.body.pwd,foundUser[0].pwd);\r\n\r\n        if(!matchPwd) return res.status(401).json({token:'', ErrMsg:'Invalid password'});\r\n        const accessToken = jwt.sign({id:foundUser[0]._id}, config.auth.SECRET,{\r\n            expiresIn: \"1m\"\r\n        });\r\n\r\n        if(!accessToken) return res.status(401).json({refreshToken : '', message : 'Something goes wrong'});\r\n        const refreshToken = jwt.sign({id:foundUser[0]._id}, config.auth.SECRET_REFRESH,{\r\n            expiresIn: \"1y\"\r\n        });\r\n\r\n        res.status(201).json({'accessToken' : accessToken,'refreshToken': refreshToken,'userId' : foundUser[0]._id,\r\n            'roles': foundUser[0].roles,'sim':foundUser[0].sim,  'core_sim':foundUser[0].coreSim, 'coreName' : foundUser[0].coreName});\r\n    });\r\n    \r\n    \r\n\r\n   \r\n}\r\n\r\nexport const refresh = async (req, res) =>{\r\n    console.log('--------------------------------------   refresh req. --> ', req.headers)\r\n    // const token = req.headers['refresh'];\r\n    // const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwYzY0YzA0ZGY2ZjU1NmE5NDZkODkxZiIsImlhdCI6MTYzMjU0NDA3MCwiZXhwIjoxNjY0MTAxNjcwfQ.aEGw_cuqDiuiBCfnAy_2DaLE2oI8aDUeFq8jBpst_1U';\r\n    let token = await req.header('Authorization');\r\n    token = token.replace('Bearer ','');\r\n    console.log('refresh Token --> ', token);\r\n    \r\n    if(!token){\r\n        res.status(400).json({message : 'Something goes wrong.'});\r\n    }\r\n\r\n    try{\r\n        console.log('----------------   Refresh token before erifyResult  ---> ');\r\n        const verifyResult = jwt.verify(token, config.auth.SECRET_REFRESH,{\r\n            ignoreExpiration: true\r\n        });\r\n        console.log('----------------   Refresh token after verifyResult  ---> ', verifyResult);\r\n\r\n        const foundUser = Users.find({_id:verifyResult.id});\r\n        if(foundUser){\r\n            console.log('Refresh token foundUser yes ---');\r\n            const accessToken = jwt.sign({id:verifyResult.id}, config.auth.SECRET,{\r\n                expiresIn: \"1m\"\r\n            });\r\n\r\n            const refreshToken = jwt.sign({id:verifyResult.id}, config.auth.SECRET_REFRESH,{\r\n                expiresIn: \"1m\"\r\n            });\r\n\r\n            res.status(200).json({'userId': verifyResult.id,'accessToken' :accessToken, \r\n                'refreshToken' : refreshToken});\r\n        }else{\r\n            console.log('Refresh token NOT foundUser ---')\r\n            res.status(400).json({message : 'Something goes wrong.'});\r\n        }\r\n    }catch(e){\r\n        console.log('refresh Token catch error ! --> ',e);\r\n        res.status(401).json({message : 'Something goes wrong.'});\r\n    }\r\n}"],"file":"auth.controller.js"}