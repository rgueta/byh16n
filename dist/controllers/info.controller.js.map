{"version":3,"sources":["../../src/controllers/info.controller.js"],"names":["createInfo","req","res","imgsRoot","config","app","images_root","prefix","Resized_prefix","folder","tools","monthlyFolder","then","f","fail","status","json","toString","fullPath","path","join","__dirname","imgPath","console","log","file","filename","resize","fit","sharp","inside","withoutEnlargement","jpeg","quality","toFile","fs","unlink","e","error","title","url","description","body","stats","fileSize","size","err","image","newInfo","InfoSaved","save","getInfo","info","information","aggregate","$match","disable","$sort","createdAt","$project","$concat","$toString","$round","$divide","$dateToString","format","date","timezone","getInfoAdmin","updInfoStatus","updateOne","params","infoId","result","statSync"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEO,MAAMA,UAAU,GAAG,OAAMC,GAAN,EAAWC,GAAX,KAAkB;AAExC,QAAMC,QAAQ,GAAGC,gBAAOC,GAAP,CAAWC,WAA5B;AACA,QAAMC,MAAM,GAAGH,gBAAOC,GAAP,CAAWG,cAA1B;AACA,MAAIC,MAAM,GAAG,EAAb;AACAC,EAAAA,KAAK,CAACC,aAAN,GAAsBC,IAAtB,CAA2B,OAAOC,CAAP,EAASC,IAAT,KAAkB;AACzC,QAAGA,IAAH,EAAQ;AACJZ,MAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAC,eAAM;AAAP,OAArB;AACA;AACH;;AAEDP,IAAAA,MAAM,GAAG,OAAMI,CAAC,CAACI,QAAF,EAAN,IAAqB,GAA9B;;AACA,UAAMC,QAAQ,GAAGC,cAAKC,IAAL,CAAUC,SAAV,EAAoB,YAApB,EAAiClB,QAAjC,EAA2CM,MAA3C,CAAjB;;AACA,UAAMa,OAAO,GAAGnB,QAAQ,GAAEM,MAA1B,CARyC,CASzC;;AACDc,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA8BN,QAAQ,GAAGjB,GAAG,CAACwB,IAAJ,CAASC,QAAlD;;AAEC,QAAG;AACC,YAAM,oBAAMR,QAAQ,GAAGjB,GAAG,CAACwB,IAAJ,CAASC,QAA1B,EACLC,MADK,CACE,GADF,EACM,GADN,EACW;AACbC,QAAAA,GAAG,EAAEC,eAAMD,GAAN,CAAUE,MADF;AAEbC,QAAAA,kBAAkB,EAAE;AAFP,OADX,EAKLC,IALK,CAKA;AAACC,QAAAA,OAAO,EAAG;AAAX,OALA,EAMLC,MANK,CAMEhB,QAAQ,GAAGX,MAAX,GAAoBN,GAAG,CAACwB,IAAJ,CAASC,QAN/B,CAAN;;AAQAS,kBAAGC,MAAH,CAAUjB,cAAKC,IAAL,CAAUF,QAAV,EAAoBjB,GAAG,CAACwB,IAAJ,CAASC,QAA7B,CAAV,EAAkDW,CAAD,IAAM;AACnD,YAAGA,CAAH,EAAK;AACDd,UAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCc,KAArC;AACH,SAFD,MAEK;AACDf,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH;AACJ,OAND,EATD,CAiBC;;;AACA,YAAM;AAACe,QAAAA,KAAD;AAAOC,QAAAA,GAAP;AAAYC,QAAAA;AAAZ,UAA2BxC,GAAG,CAACyC,IAArC;AAEA,UAAIC,KAAK,GAAG,EAAZ;;AACA,UAAG;AACCA,QAAAA,KAAK,GAAG,MAAMC,QAAQ,CAACzB,cAAKC,IAAL,CAAUF,QAAV,EAAqBX,MAAM,GAAIN,GAAG,CAACwB,IAAJ,CAASC,QAAxC,CAAD,CAAtB;AACAH,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBmB,KAAK,CAACE,IAArC;AACH,OAHD,CAGC,OAAMC,GAAN,EAAU;AACPvB,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCsB,GAAjC;AACH;;AAED,YAAMC,KAAK,GAAGxC,MAAM,GAAGN,GAAG,CAACwB,IAAJ,CAASC,QAAhC;AACA,YAAMmB,IAAI,GAAGF,KAAK,CAACE,IAAnB;AAEA,YAAMG,OAAO,GAAG,MAAM,mBAAY;AAACT,QAAAA,KAAD;AAAOC,QAAAA,GAAP;AAAWC,QAAAA,WAAX;AAClCM,QAAAA,KADkC;AAC5B,gBAAOzB,OADqB;AACbuB,QAAAA;AADa,OAAZ,CAAtB;AAEAtB,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBwB,OAAvB;;AACA,UAAGA,OAAH,EAAW;AACP,cAAMC,SAAS,GAAG,MAAMD,OAAO,CAACE,IAAR,EAAxB;AACH;;AAEDhD,MAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAC,eAAQ;AAAT,OAArB;AACH,KAvCD,CAwCA,OAAM8B,GAAN,EAAU;AACNvB,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCsB,GAAhC;AACA5C,MAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAC,iBAAU,6BAA6B8B;AAAxC,OAArB;AACH;AACJ,GAxDD;AA0DH,CA/DM;;;;AAiEA,MAAMK,OAAO,GAAG,OAAMlD,GAAN,EAAWC,GAAX,KAAkB;AACrC;AACA,QAAMkD,IAAI,GAAG,MAAMC,cAAYC,SAAZ,CAAsB,CACrC;AACIC,IAAAA,MAAM,EAAG;AAACC,MAAAA,OAAO,EAAG;AAAX;AADb,GADqC,EAIrC;AACIC,IAAAA,KAAK,EAAG;AAACC,MAAAA,SAAS,EAAG,CAAC;AAAd;AADZ,GAJqC,EAOrC;AACIC,IAAAA,QAAQ,EAAE;AACNpB,MAAAA,KAAK,EAAG,CADF;AAENE,MAAAA,WAAW,EAAG,CAFR;AAGND,MAAAA,GAAG,EAAG,CAHA;AAINO,MAAAA,KAAK,EAAG,CAJF;AAKN5B,MAAAA,IAAI,EAAG,CALD;AAMNqC,MAAAA,OAAO,EAAG,CANJ;AAONX,MAAAA,IAAI,EAAG;AAACe,QAAAA,OAAO,EAAG,CACV;AAAEC,UAAAA,SAAS,EACP;AAACC,YAAAA,MAAM,EAAG,CAAC;AAACC,cAAAA,OAAO,EAAG,CAAC,OAAD,EAAS,IAAT;AAAX,aAAD,EAA6B,CAA7B;AAAV;AADJ,SADU,EAGP,KAHO;AAAX,OAPD;AAYNL,MAAAA,SAAS,EAAG;AACEM,QAAAA,aAAa,EAAE;AACbC,UAAAA,MAAM,EAAE,mBADK;AAEbC,UAAAA,IAAI,EAAE,YAFO;AAGbC,UAAAA,QAAQ,EAAE;AAHG;AADjB;AAZN;AADd,GAPqC,CAAtB,CAAnB;;AA+BA,MAAG,CAACf,IAAJ,EAAS;AACL7B,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAqCsB,GAArC;AACA5C,IAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAC,eAAQ,uBAAuB8B;AAAhC,KAArB;AACH,GAHD,MAGK;AACDvB,IAAAA,OAAO,CAACC,GAAR,CAAY4B,IAAZ;AACAlD,IAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBoC,IAArB;AACH;AACJ,CAxCM;;;;AA0CA,MAAMgB,YAAY,GAAG,OAAMnE,GAAN,EAAWC,GAAX,KAAkB;AAC1C,QAAMkD,IAAI,GAAG,MAAMC,cAAYC,SAAZ,CAAsB,CACrC;AACIG,IAAAA,KAAK,EAAG;AAACC,MAAAA,SAAS,EAAG,CAAC;AAAd;AADZ,GADqC,EAIrC;AACIC,IAAAA,QAAQ,EAAE;AACNpB,MAAAA,KAAK,EAAG,CADF;AAENE,MAAAA,WAAW,EAAG,CAFR;AAGND,MAAAA,GAAG,EAAG,CAHA;AAINO,MAAAA,KAAK,EAAG,CAJF;AAKN5B,MAAAA,IAAI,EAAG,CALD;AAMNqC,MAAAA,OAAO,EAAG,CANJ;AAONX,MAAAA,IAAI,EAAG;AAACe,QAAAA,OAAO,EAAG,CACV;AAAEC,UAAAA,SAAS,EACP;AAACC,YAAAA,MAAM,EAAG,CAAC;AAACC,cAAAA,OAAO,EAAG,CAAC,OAAD,EAAS,IAAT;AAAX,aAAD,EAA6B,CAA7B;AAAV;AADJ,SADU,EAGP,KAHO;AAAX,OAPD;AAYNL,MAAAA,SAAS,EAAG;AACEM,QAAAA,aAAa,EAAE;AACbC,UAAAA,MAAM,EAAE,mBADK;AAEbC,UAAAA,IAAI,EAAE,YAFO;AAGbC,UAAAA,QAAQ,EAAE;AAHG;AADjB;AAZN;AADd,GAJqC,CAAtB,CAAnB;;AA4BA,MAAG,CAACf,IAAJ,EAAS;AACL7B,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAqCsB,GAArC;AACA5C,IAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAC,eAAQ,uBAAuB8B;AAAhC,KAArB;AACH,GAHD,MAGK;AACDvB,IAAAA,OAAO,CAACC,GAAR,CAAY4B,IAAZ;AACAlD,IAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBoC,IAArB;AACH;AACJ,CApCM;;;;AAsCA,MAAMiB,aAAa,GAAG,OAAMpE,GAAN,EAAWC,GAAX,KAAmB;AAC5C;AACA,QAAMmD,cAAYiB,SAAZ,CAAsB;AAAC,WAAMrE,GAAG,CAACsE,MAAJ,CAAWC;AAAlB,GAAtB,EACN;AAAC,YAAS;AAAC,iBAAYvE,GAAG,CAACyC,IAAJ,CAASc;AAAtB;AAAV,GADM,EACoC,CAACV,GAAD,EAAK2B,MAAL,KAAc;AACpD,QAAG3B,GAAH,EAAO;AACH5C,MAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAC,iBAAQ,wBAAwB8B;AAAjC,OAArB;AACA;AACH,KAHD,MAGK;AACD5C,MAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAC,eAAM;AAAP,OAArB;AACH;AACJ,GARK,CAAN;AAUH,CAZM;;;;AAcP,eAAe4B,QAAf,CAAwBnB,IAAxB,EAA6B;AACzB,QAAMkB,KAAK,GAAG,MAAMR,YAAGuC,QAAH,CAAYjD,IAAZ,CAApB;AACA,SAAOkB,KAAP;AACH","sourcesContent":["import information from \"../models/info.model\";\r\nimport  { Types } from \"mongoose\";\r\nimport path from 'path'\r\nimport sharp from \"sharp\";\r\nimport fs, { stat } from \"fs\";\r\nimport config from \"../config\";\r\nimport * as tools from \"../tools\";\r\n\r\nexport const createInfo = async(req, res) =>{\r\n    \r\n    const imgsRoot = config.app.images_root;\r\n    const prefix = config.app.Resized_prefix;\r\n    let folder = '';\r\n    tools.monthlyFolder().then(async (f,fail) => {\r\n        if(fail){\r\n            res.status(400).json({'msg':'Error to generate folder'})\r\n            return;\r\n        }\r\n\r\n        folder = await f.toString() + '/';\r\n        const fullPath = path.join(__dirname,'../public/',imgsRoot, folder);\r\n        const imgPath = imgsRoot +folder;\r\n        // Resize image ----------------------------------------\r\n       console.log('resize file--> ',fullPath + req.file.filename);\r\n\r\n        try{\r\n            await sharp(fullPath + req.file.filename)\r\n            .resize(640,480, {\r\n                fit: sharp.fit.inside,\r\n                withoutEnlargement: true\r\n            })\r\n            .jpeg({quality : 80})\r\n            .toFile(fullPath + prefix + req.file.filename);\r\n\r\n            fs.unlink(path.join(fullPath, req.file.filename),(e) =>{\r\n                if(e){\r\n                    console.log('error deleting file: ', error);\r\n                }else{\r\n                    console.log('file deleted');\r\n                }\r\n            });\r\n\r\n            // -- Insert into Mongo  ---------------------\r\n            const {title,url, description} = req.body;\r\n\r\n            let stats = {};\r\n            try{\r\n                stats = await fileSize(path.join(fullPath , prefix +  req.file.filename));\r\n                console.log('file size --> ' + stats.size);\r\n            }catch(err){\r\n                console.log('Error multer --> ', err)\r\n            }\r\n\r\n            const image = prefix + req.file.filename;\r\n            const size = stats.size;\r\n\r\n            const newInfo = await information({title,url,description,\r\n            image,'path':imgPath,size});\r\n            console.log('newInfo', newInfo);\r\n            if(newInfo){\r\n                const InfoSaved = await newInfo.save();\r\n            }\r\n                      \r\n            res.status(201).json({'msg' : 'Information created'});\r\n        }\r\n        catch(err){\r\n            console.log('Error at the end', err)\r\n            res.status(401).json({'error' : 'Error creating informat ' + err})\r\n        }\r\n    });\r\n   \r\n};\r\n\r\nexport const getInfo = async(req, res) =>{\r\n    // const info = await information.find({enable : true}).sort({'createdAt':-1});\r\n    const info = await information.aggregate([\r\n        {\r\n            $match : {disable : false}\r\n        },\r\n        {\r\n            $sort : {createdAt : -1}\r\n        },\r\n        {\r\n            $project: {\r\n                title : 1,\r\n                description : 1,\r\n                url : 1,\r\n                image : 1,\r\n                path : 1,\r\n                disable : 1,\r\n                size : {$concat : [\r\n                        { $toString : \r\n                            {$round : [{$divide : ['$size',1024]}, 2]}\r\n                        }, ' KB']\r\n                       },\r\n                createdAt : { \r\n                              $dateToString: { \r\n                                format: '%Y/%m/%d %H:%M:%S', \r\n                                date: '$createdAt', \r\n                                timezone: 'America/Los_Angeles' \r\n                              } \r\n                            }\r\n            }\r\n        }\r\n    ])\r\n\r\n    if(!info){\r\n        console.log('Error getting info -> ',err)\r\n        res.status(402).json({'Error':'Error getting info' + err})\r\n    }else{\r\n        console.log(info)\r\n        res.status(201).json(info)\r\n    }    \r\n}\r\n\r\nexport const getInfoAdmin = async(req, res) =>{\r\n    const info = await information.aggregate([\r\n        {\r\n            $sort : {createdAt : -1}\r\n        },\r\n        {\r\n            $project: {\r\n                title : 1,\r\n                description : 1,\r\n                url : 1,\r\n                image : 1,\r\n                path : 1,\r\n                disable : 1,\r\n                size : {$concat : [\r\n                        { $toString : \r\n                            {$round : [{$divide : ['$size',1024]}, 2]}\r\n                        }, ' KB']\r\n                       },\r\n                createdAt : { \r\n                              $dateToString: { \r\n                                format: '%Y/%m/%d %H:%M:%S', \r\n                                date: '$createdAt', \r\n                                timezone: 'America/Los_Angeles' \r\n                              } \r\n                            }\r\n            }\r\n        }\r\n    ])\r\n\r\n    if(!info){\r\n        console.log('Error getting info -> ',err)\r\n        res.status(402).json({'Error':'Error getting info' + err})\r\n    }else{\r\n        console.log(info)\r\n        res.status(201).json(info)\r\n    }    \r\n}\r\n\r\nexport const updInfoStatus = async(req, res) => {\r\n    // console.log('update info', req.params,req.body)\r\n    await information.updateOne({'_id':req.params.infoId},\r\n    {'$set' : {'disable' : req.body.disable}},(err,result)=>{\r\n        if(err){\r\n            res.status(401).json({'error':'Info status changed' + err});\r\n            return;\r\n        }else{\r\n            res.status(201).json({'msg':'Info status changed'});\r\n        }\r\n    });\r\n        \r\n}\r\n\r\nasync function fileSize(file){\r\n    const stats = await fs.statSync(file);\r\n    return stats\r\n}\r\n\r\n"],"file":"info.controller.js"}