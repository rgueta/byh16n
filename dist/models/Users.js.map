{"version":3,"sources":["../../src/models/Users.js"],"names":["userSchema","Schema","name","type","String","required","email","unique","lowercase","trim","username","pwd","core","Types","ObjectId","house","Number","uuid","sim","gender","avatar","roles","ref","status","timestamps","versionKey","statics","encryptPassword","salt","bcrypt","genSalt","hash","comparePassword","password","receivedPassword","console","log","compare"],"mappings":";;;;;;;AAAA;;AACA;;;;AAGA,MAAMA,UAAU,GAAG,IAAIC,gBAAJ,CAAW;AAC1BC,EAAAA,IAAI,EAAG;AAACC,IAAAA,IAAI,EAAGC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B,GADmB;AAE1BC,EAAAA,KAAK,EAAG;AAACH,IAAAA,IAAI,EAAGC,MAAR;AAAgBG,IAAAA,MAAM,EAAG,IAAzB;AAA8BF,IAAAA,QAAQ,EAAE,IAAxC;AAA8CG,IAAAA,SAAS,EAAC,IAAxD;AAA8DC,IAAAA,IAAI,EAAC;AAAnE,GAFkB;AAG1BC,EAAAA,QAAQ,EAAG;AAACP,IAAAA,IAAI,EAAGC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B,GAHe;AAI1BM,EAAAA,GAAG,EAAG;AAACR,IAAAA,IAAI,EAAGC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE,IAA1B;AAAgCI,IAAAA,IAAI,EAAE;AAAtC,GAJoB;AAK1BG,EAAAA,IAAI,EAAG;AAACT,IAAAA,IAAI,EAAGF,iBAAOY,KAAP,CAAaC,QAArB;AAA+BT,IAAAA,QAAQ,EAAE;AAAzC,GALmB;AAM1BU,EAAAA,KAAK,EAAG;AAACZ,IAAAA,IAAI,EAAGa,MAAR;AAAgBX,IAAAA,QAAQ,EAAE;AAA1B,GANkB;AAO1BY,EAAAA,IAAI,EAAG;AAACd,IAAAA,IAAI,EAAGC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B,GAPmB;AAQ1Ba,EAAAA,GAAG,EAAG;AAACf,IAAAA,IAAI,EAAGC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B,GARoB;AAS1Bc,EAAAA,MAAM,EAAG;AAAChB,IAAAA,IAAI,EAAGC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B,GATiB;AAU1Be,EAAAA,MAAM,EAAG;AAACjB,IAAAA,IAAI,EAAGC;AAAR,GAViB;AAW1BiB,EAAAA,KAAK,EAAG,CAAC;AACLC,IAAAA,GAAG,EAAE,OADA;AAELnB,IAAAA,IAAI,EAAEF,iBAAOY,KAAP,CAAaC;AAFd,GAAD,CAXkB;AAe1BS,EAAAA,MAAM,EAAG;AAACpB,IAAAA,IAAI,EAAGa;AAAR;AAfiB,CAAX,EAiBnB;AACIQ,EAAAA,UAAU,EAAC,IADf;AAEIC,EAAAA,UAAU,EAAC;AAFf,CAjBmB,CAAnB;;AAsBAzB,UAAU,CAAC0B,OAAX,CAAmBC,eAAnB,GAAqC,MAAOhB,GAAP,IAAc;AAC/C,QAAMiB,IAAI,GAAG,MAAMC,kBAAOC,OAAP,CAAe,EAAf,CAAnB;AACA,SAAO,MAAMD,kBAAOE,IAAP,CAAYpB,GAAZ,EAAgBiB,IAAhB,CAAb;AACH,CAHD;;AAMA5B,UAAU,CAAC0B,OAAX,CAAmBM,eAAnB,GAAqC,OAAMC,QAAN,EAAgBC,gBAAhB,KAAqC;AACtEC,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAA0BF,gBAAtC;AACA,SAAO,MAAML,kBAAOQ,OAAP,CAAeJ,QAAf,EAAyBC,gBAAzB,CAAb;AACH,CAHD;;eAKe,qBAAM,OAAN,EAAelC,UAAf,C","sourcesContent":["import {Schema, model} from 'mongoose';\r\nimport bcrypt from 'bcryptjs';\r\n\r\n\r\nconst userSchema = new Schema({\r\n    name : {type : String, required: true},\r\n    email : {type : String, unique : true,required: true, lowercase:true, trim:true},\r\n    username : {type : String, required: true},\r\n    pwd : {type : String, required: true, trim: true},\r\n    core : {type : Schema.Types.ObjectId, required: true},\r\n    house : {type : Number, required: true},\r\n    uuid : {type : String, required: true},\r\n    sim : {type : String, required: true},\r\n    gender : {type : String, required: true},\r\n    avatar : {type : String},\r\n    roles : [{\r\n        ref: 'Roles',\r\n        type: Schema.Types.ObjectId\r\n    }],\r\n    status : {type : Number}\r\n},\r\n{\r\n    timestamps:true,\r\n    versionKey:false\r\n});\r\n\r\nuserSchema.statics.encryptPassword = async (pwd) =>{\r\n    const salt = await bcrypt.genSalt(10);\r\n    return await bcrypt.hash(pwd,salt);\r\n}\r\n\r\n\r\nuserSchema.statics.comparePassword = async(password, receivedPassword) => {\r\n    console.log('receivedPassword --> ' + receivedPassword)\r\n    return await bcrypt.compare(password, receivedPassword);\r\n}\r\n\r\nexport default model('Users', userSchema);"],"file":"Users.js"}