{"version":3,"sources":["../../src/models/visitors.js"],"names":["visitorSchema","Schema","userId","type","Types","ObjectId","name","String","required","email","unique","lowercase","trim","username","pwd","address","sim","gender","avatar","timestamps","versionKey","statics","encryptPassword","salt","bcrypt","genSalt","hash","comparePassword","password","receivedPassword","compare"],"mappings":";;;;;;;AAAA;;AACA;;;;AAGA,MAAMA,aAAa,GAAG,IAAIC,gBAAJ,CAAW;AAC7BC,EAAAA,MAAM,EAAE;AAACC,IAAAA,IAAI,EAAEF,iBAAOG,KAAP,CAAaC;AAApB,GADqB;AAE7BC,EAAAA,IAAI,EAAG;AAACH,IAAAA,IAAI,EAAGI,MAAR;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B,GAFsB;AAG7BC,EAAAA,KAAK,EAAG;AAACN,IAAAA,IAAI,EAAGI,MAAR;AAAgBG,IAAAA,MAAM,EAAG,IAAzB;AAA8BF,IAAAA,QAAQ,EAAE,IAAxC;AAA8CG,IAAAA,SAAS,EAAC,IAAxD;AAA8DC,IAAAA,IAAI,EAAC;AAAnE,GAHqB;AAI7BC,EAAAA,QAAQ,EAAG;AAACV,IAAAA,IAAI,EAAGI;AAAR,GAJkB;AAK7BO,EAAAA,GAAG,EAAG;AAACX,IAAAA,IAAI,EAAGI,MAAR;AAAgBK,IAAAA,IAAI,EAAE;AAAtB,GALuB;AAM7BG,EAAAA,OAAO,EAAG;AAACZ,IAAAA,IAAI,EAAGI;AAAR,GANmB;AAO7BS,EAAAA,GAAG,EAAG;AAACb,IAAAA,IAAI,EAAGI,MAAR;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B,GAPuB;AAQ7BS,EAAAA,MAAM,EAAG;AAACd,IAAAA,IAAI,EAAGI;AAAR,GARoB;AAS7BW,EAAAA,MAAM,EAAG;AAACf,IAAAA,IAAI,EAAGI;AAAR;AAToB,CAAX,EAWtB;AACIY,EAAAA,UAAU,EAAC,IADf;AAEIC,EAAAA,UAAU,EAAC;AAFf,CAXsB,CAAtB;;AAgBApB,aAAa,CAACqB,OAAd,CAAsBC,eAAtB,GAAwC,MAAOR,GAAP,IAAc;AAClD,QAAMS,IAAI,GAAG,MAAMC,kBAAOC,OAAP,CAAe,EAAf,CAAnB;AACA,SAAO,MAAMD,kBAAOE,IAAP,CAAYZ,GAAZ,EAAgBS,IAAhB,CAAb;AACH,CAHD;;AAKIvB,aAAa,CAACqB,OAAd,CAAsBM,eAAtB,GAAwC,OAAMC,QAAN,EAAgBC,gBAAhB,KAAqC;AAC7E,SAAO,MAAML,kBAAOM,OAAP,CAAeF,QAAf,EAAyBC,gBAAzB,CAAb;AACH,CAFG;;eAIW,qBAAM,UAAN,EAAkB7B,aAAlB,C","sourcesContent":["import {Schema, model} from 'mongoose';\r\nimport bcrypt from 'bcryptjs';\r\n\r\n\r\nconst visitorSchema = new Schema({\r\n    userId: {type: Schema.Types.ObjectId},\r\n    name : {type : String, required: true},\r\n    email : {type : String, unique : true,required: true, lowercase:true, trim:true},\r\n    username : {type : String},\r\n    pwd : {type : String, trim: true},\r\n    address : {type : String},\r\n    sim : {type : String, required: true},\r\n    gender : {type : String},\r\n    avatar : {type : String},\r\n},\r\n{\r\n    timestamps:true,\r\n    versionKey:false\r\n});\r\n\r\nvisitorSchema.statics.encryptPassword = async (pwd) =>{\r\n    const salt = await bcrypt.genSalt(10);\r\n    return await bcrypt.hash(pwd,salt);\r\n}\r\n\r\n    visitorSchema.statics.comparePassword = async(password, receivedPassword) => {\r\n    return await bcrypt.compare(password, receivedPassword);\r\n}\r\n\r\nexport default model('Visitors', visitorSchema);"],"file":"visitors.js"}