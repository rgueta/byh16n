{"version":3,"sources":["../../src/routes/info.routes.js"],"names":["router","folder","tools","monthlyFolder","then","f","fail","console","log","toString","fullPath","path","join","__dirname","imgId","storage","multer","diskStorage","destination","req","file","cb","fs","mkdirSync","recursive","filename","extname","originalname","upload","post","single","authJwt","isAdmin","infoCtrl","createInfo","err","get","isNeighbor","getInfo","getInfoAdmin","updInfoStatus"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,MAAMA,MAAM,GAAG,sBAAf,C,CAEA;;AACA,IAAIC,MAAM,GAAG,EAAb;AACCC,KAAK,CAACC,aAAN,GAAsBC,IAAtB,CAA2B,OAAOC,CAAP,EAASC,IAAT,KAAkB;AAC1C,MAAGA,IAAH,EAAQ;AACJC,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACA;AACH;;AACA,MAAG;AACAP,IAAAA,MAAM,GAAG,OAAMI,CAAC,CAACI,QAAF,EAAN,IAAqB,GAA9B;;AAEA,UAAMC,QAAQ,GAAGC,cAAKC,IAAL,CAAUC,SAAV,EAAqB,wBAArB,EAA+CZ,MAA/C,CAAjB;;AACA,UAAMa,KAAK,GAAG,eAAd;;AAEA,UAAMC,OAAO,GAAGC,gBAAOC,WAAP,CAAmB;AAC/BC,MAAAA,WAAW,EAAE,CAACC,GAAD,EAAMC,IAAN,EAAYC,EAAZ,KAAmB;AAC5BC,oBAAGC,SAAH,CAAab,QAAb,EAAsB;AAACc,UAAAA,SAAS,EAAG;AAAb,SAAtB;;AACAH,QAAAA,EAAE,CAAC,IAAD,EAAOX,QAAP,CAAF;AACH,OAJ8B;AAK/Be,MAAAA,QAAQ,EAAE,CAACN,GAAD,EAAMC,IAAN,EAAYC,EAAZ,KAAmB;AACzB;AACAA,QAAAA,EAAE,CAAC,IAAD,EAAO,kBAASV,cAAKe,OAAL,CAAaN,IAAI,CAACO,YAAlB,CAAhB,CAAF;AACH;AAR8B,KAAnB,CAAhB;;AAWA,UAAMC,MAAM,GAAG,qBAAO;AAACb,MAAAA;AAAD,KAAP,CAAf;AAEAf,IAAAA,MAAM,CAAC6B,IAAP,CAAY,UAAZ,EAAuBD,MAAM,CAACE,MAAP,CAAc,OAAd,CAAvB,EAA8C,CAACC,oBAAQC,OAAT,CAA9C,EAAgEC,QAAQ,CAACC,UAAzE;AACF,GApBD,CAoBC,OAAMC,GAAN,EAAU;AACP5B,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC2B,GAAjC;AACH;AACJ,CA5BD;AA8BAnC,MAAM,CAACoC,GAAP,CAAW,UAAX,EAAsB,CAACL,oBAAQM,UAAT,CAAtB,EAA2CJ,QAAQ,CAACK,OAApD;AACAtC,MAAM,CAACoC,GAAP,CAAW,cAAX,EAA0B,CAACL,oBAAQM,UAAT,CAA1B,EAA+CJ,QAAQ,CAACM,YAAxD;AACAvC,MAAM,CAAC6B,IAAP,CAAY,4BAAZ,EAAyC,CAACE,oBAAQC,OAAT,CAAzC,EAA2DC,QAAQ,CAACO,aAApE;eAEcxC,M","sourcesContent":["import {Router} from 'express'\r\nimport * as infoCtrl from \"../controllers/info.controller\";\r\nimport { authJwt } from \"../middleware\";\r\n\r\nimport path from 'path';\r\nimport multer from \"multer\";\r\nimport {v4 as uuid} from 'uuid';\r\nimport * as tools from \"../tools\";\r\nimport fs from 'fs';\r\n\r\nconst router = Router();\r\n\r\n// multer add image  -------------\r\nlet folder = '';\r\n tools.monthlyFolder().then(async (f,fail) => {\r\n    if(fail){\r\n        console.log('Error to generate folder');\r\n        return;\r\n    }\r\n     try{\r\n        folder = await f.toString() + '/';\r\n\r\n        const fullPath = path.join(__dirname, '../public/img/uploads/', folder);\r\n        const imgId = uuid();\r\n\r\n        const storage = multer.diskStorage({\r\n            destination: (req, file, cb) => {\r\n                fs.mkdirSync(fullPath,{recursive : true})\r\n                cb(null, fullPath);\r\n            },\r\n            filename: (req, file, cb) => {\r\n                // console.log(file);\r\n                cb(null, uuid() + path.extname(file.originalname));\r\n            }\r\n        });\r\n\r\n        const upload = multer({storage});\r\n\r\n        router.post('/:userId',upload.single('image'),[authJwt.isAdmin],infoCtrl.createInfo);\r\n     }catch(err){\r\n         console.log('Error multer --> ', err)\r\n     }\r\n });\r\n\r\n router.get('/:userId',[authJwt.isNeighbor],infoCtrl.getInfo);\r\n router.get('/all/:userId',[authJwt.isNeighbor],infoCtrl.getInfoAdmin);\r\n router.post('/updStatus/:userId/:infoId',[authJwt.isAdmin],infoCtrl.updInfoStatus);\r\n\r\nexport default router;\r\n"],"file":"info.routes.js"}